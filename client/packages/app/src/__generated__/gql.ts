/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query ProcessScreen(\n    $where: ResumableProcessMirrorWhereInput\n    $orderBy: [ResumableProcessMirrorOrderByWithRelationInput!]\n    $take: Int\n    $skip: Int\n    $resumableProcessMirrorWhere: ResumableProcessMirrorWhereUniqueInput!\n  ) {\n    resumableProcessMirror(where: $resumableProcessMirrorWhere) {\n      id\n      parentProcessId\n      parentProcessStep\n      parentProcessStepKey\n      type\n      status\n      currentStep\n      props\n      state\n      result\n      log {\n        type\n        value\n      }\n      createdAt\n      updatedAt\n    }\n    aggregateResumableProcessMirror(where: $where) {\n      _count {\n        id\n      }\n    }\n    resumableProcessMirrors(\n      where: $where\n      orderBy: $orderBy\n      take: $take\n      skip: $skip\n    ) {\n      id\n      type\n      status\n      props\n      createdAt\n      updatedAt\n    }\n  }\n": types.ProcessScreenDocument,
    "\n  mutation Mutation2($abortProcessId: String!) {\n    abortProcess(id: $abortProcessId)\n  }\n": types.Mutation2Document,
    "\n  mutation Mutation3($abortProcessId: String!) {\n    resumeProcess(id: $abortProcessId)\n  }\n": types.Mutation3Document,
    "\n  query ProcessesScreen(\n    $where: ResumableProcessMirrorWhereInput\n    $orderBy: [ResumableProcessMirrorOrderByWithRelationInput!]\n    $take: Int\n    $skip: Int\n  ) {\n    aggregateResumableProcessMirror(where: $where) {\n      _count {\n        id\n      }\n    }\n    resumableProcessMirrors(\n      where: $where\n      orderBy: $orderBy\n      take: $take\n      skip: $skip\n    ) {\n      id\n      type\n      status\n      currentStep\n      props\n      state\n      result\n      log {\n        type\n        value\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.ProcessesScreenDocument,
    "\n  query ResumableProcessMirrors12(\n    $where: ResumableProcessMirrorWhereInput\n    $orderBy: [ResumableProcessMirrorOrderByWithRelationInput!]\n    $take: Int\n    $skip: Int\n  ) {\n    resumableProcessMirrors(\n      where: $where\n      orderBy: $orderBy\n      take: $take\n      skip: $skip\n    ) {\n      id\n      type\n      status\n      currentStep\n      props\n      state\n      result\n      log {\n        type\n        value\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.ResumableProcessMirrors12Document,
    "\n  query LotScreen($where: LotWhereUniqueInput!) {\n    lot(where: $where) {\n      id\n      auction\n      lotNumber\n      sellingBranch\n      saleLocation\n      location\n      auctionDateTime\n      seller\n      preAccidentValue\n      actualCashValue\n      estimatedRepairCost\n      lastPreBid\n      finalBid\n      saleStatus\n      titleType\n      titleBrand\n      titleNotes\n      primaryDamage\n      secondaryDamage\n      loss\n      startCode\n      highlights\n      key\n      odometer\n      engine\n      fuelType\n      transmission\n      drivelineType\n      interiorColor\n      exteriorColor\n      buyNowPrice\n      bodyStyle\n      airbagsStatus\n      cylinders\n      manufacturedIn\n      sourceLastUpdated\n      createdAt\n      updatedAt\n      unprocessed {\n        imgs\n        status\n        soldBefore\n        buyNowCloseTime\n        prebidClosedTrans\n        leftTrans\n      }\n      vehicle {\n        id\n        vin\n        createdAt\n        model {\n          id\n          name\n          make {\n            id\n            name\n          }\n        }\n        unprocessed {\n          name\n        }\n        updatedAt\n        year\n      }\n    }\n  }\n": types.LotScreenDocument,
    "\n  query VehicleTypesFilterQuery(\n    $orderBy: [VehicleTypeOrderByWithRelationInput!]\n  ) {\n    vehicleTypes(orderBy: $orderBy) {\n      id\n      name\n    }\n  }\n": types.VehicleTypesFilterQueryDocument,
    "\n  query MakesFilterQuery(\n    $where: MakeWhereInput\n    $orderBy: [MakeOrderByWithRelationInput!]\n  ) {\n    makes(where: $where, orderBy: $orderBy) {\n      name\n      id\n    }\n  }\n": types.MakesFilterQueryDocument,
    "\n  query ModelsFilterQuery(\n    $orderBy: [ModelOrderByWithRelationInput!]\n    $where: ModelWhereInput\n  ) {\n    models(orderBy: $orderBy, where: $where) {\n      id\n      name\n    }\n  }\n": types.ModelsFilterQueryDocument,
    "\n  query Query(\n    $take: Int\n    $skip: Int\n    $orderBy: [LotOrderByWithRelationInput!]\n    $where: LotWhereInput\n  ) {\n    aggregateLot(where: $where) {\n      _count {\n        id\n      }\n    }\n    lots(take: $take, skip: $skip, orderBy: $orderBy, where: $where) {\n      id\n      auction\n      lotNumber\n      sellingBranch\n      saleLocation\n      location\n      auctionDateTime\n      seller\n      preAccidentValue\n      actualCashValue\n      estimatedRepairCost\n      lastPreBid\n      finalBid\n      saleStatus\n      titleType\n      titleBrand\n      titleNotes\n      primaryDamage\n      secondaryDamage\n      loss\n      startCode\n      highlights\n      key\n      odometer\n      engine\n      fuelType\n      transmission\n      drivelineType\n      interiorColor\n      exteriorColor\n      buyNowPrice\n      bodyStyle\n      airbagsStatus\n      cylinders\n      manufacturedIn\n      sourceLastUpdated\n      vehicleId\n      unprocessed {\n        imgs\n      }\n      vehicle {\n        id\n        vin\n        modelId\n        seriesId\n        vehicleTypeId\n        year\n        model {\n          id\n          name\n          make {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.QueryDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProcessScreen(\n    $where: ResumableProcessMirrorWhereInput\n    $orderBy: [ResumableProcessMirrorOrderByWithRelationInput!]\n    $take: Int\n    $skip: Int\n    $resumableProcessMirrorWhere: ResumableProcessMirrorWhereUniqueInput!\n  ) {\n    resumableProcessMirror(where: $resumableProcessMirrorWhere) {\n      id\n      parentProcessId\n      parentProcessStep\n      parentProcessStepKey\n      type\n      status\n      currentStep\n      props\n      state\n      result\n      log {\n        type\n        value\n      }\n      createdAt\n      updatedAt\n    }\n    aggregateResumableProcessMirror(where: $where) {\n      _count {\n        id\n      }\n    }\n    resumableProcessMirrors(\n      where: $where\n      orderBy: $orderBy\n      take: $take\n      skip: $skip\n    ) {\n      id\n      type\n      status\n      props\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query ProcessScreen(\n    $where: ResumableProcessMirrorWhereInput\n    $orderBy: [ResumableProcessMirrorOrderByWithRelationInput!]\n    $take: Int\n    $skip: Int\n    $resumableProcessMirrorWhere: ResumableProcessMirrorWhereUniqueInput!\n  ) {\n    resumableProcessMirror(where: $resumableProcessMirrorWhere) {\n      id\n      parentProcessId\n      parentProcessStep\n      parentProcessStepKey\n      type\n      status\n      currentStep\n      props\n      state\n      result\n      log {\n        type\n        value\n      }\n      createdAt\n      updatedAt\n    }\n    aggregateResumableProcessMirror(where: $where) {\n      _count {\n        id\n      }\n    }\n    resumableProcessMirrors(\n      where: $where\n      orderBy: $orderBy\n      take: $take\n      skip: $skip\n    ) {\n      id\n      type\n      status\n      props\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Mutation2($abortProcessId: String!) {\n    abortProcess(id: $abortProcessId)\n  }\n"): (typeof documents)["\n  mutation Mutation2($abortProcessId: String!) {\n    abortProcess(id: $abortProcessId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Mutation3($abortProcessId: String!) {\n    resumeProcess(id: $abortProcessId)\n  }\n"): (typeof documents)["\n  mutation Mutation3($abortProcessId: String!) {\n    resumeProcess(id: $abortProcessId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProcessesScreen(\n    $where: ResumableProcessMirrorWhereInput\n    $orderBy: [ResumableProcessMirrorOrderByWithRelationInput!]\n    $take: Int\n    $skip: Int\n  ) {\n    aggregateResumableProcessMirror(where: $where) {\n      _count {\n        id\n      }\n    }\n    resumableProcessMirrors(\n      where: $where\n      orderBy: $orderBy\n      take: $take\n      skip: $skip\n    ) {\n      id\n      type\n      status\n      currentStep\n      props\n      state\n      result\n      log {\n        type\n        value\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query ProcessesScreen(\n    $where: ResumableProcessMirrorWhereInput\n    $orderBy: [ResumableProcessMirrorOrderByWithRelationInput!]\n    $take: Int\n    $skip: Int\n  ) {\n    aggregateResumableProcessMirror(where: $where) {\n      _count {\n        id\n      }\n    }\n    resumableProcessMirrors(\n      where: $where\n      orderBy: $orderBy\n      take: $take\n      skip: $skip\n    ) {\n      id\n      type\n      status\n      currentStep\n      props\n      state\n      result\n      log {\n        type\n        value\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ResumableProcessMirrors12(\n    $where: ResumableProcessMirrorWhereInput\n    $orderBy: [ResumableProcessMirrorOrderByWithRelationInput!]\n    $take: Int\n    $skip: Int\n  ) {\n    resumableProcessMirrors(\n      where: $where\n      orderBy: $orderBy\n      take: $take\n      skip: $skip\n    ) {\n      id\n      type\n      status\n      currentStep\n      props\n      state\n      result\n      log {\n        type\n        value\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query ResumableProcessMirrors12(\n    $where: ResumableProcessMirrorWhereInput\n    $orderBy: [ResumableProcessMirrorOrderByWithRelationInput!]\n    $take: Int\n    $skip: Int\n  ) {\n    resumableProcessMirrors(\n      where: $where\n      orderBy: $orderBy\n      take: $take\n      skip: $skip\n    ) {\n      id\n      type\n      status\n      currentStep\n      props\n      state\n      result\n      log {\n        type\n        value\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LotScreen($where: LotWhereUniqueInput!) {\n    lot(where: $where) {\n      id\n      auction\n      lotNumber\n      sellingBranch\n      saleLocation\n      location\n      auctionDateTime\n      seller\n      preAccidentValue\n      actualCashValue\n      estimatedRepairCost\n      lastPreBid\n      finalBid\n      saleStatus\n      titleType\n      titleBrand\n      titleNotes\n      primaryDamage\n      secondaryDamage\n      loss\n      startCode\n      highlights\n      key\n      odometer\n      engine\n      fuelType\n      transmission\n      drivelineType\n      interiorColor\n      exteriorColor\n      buyNowPrice\n      bodyStyle\n      airbagsStatus\n      cylinders\n      manufacturedIn\n      sourceLastUpdated\n      createdAt\n      updatedAt\n      unprocessed {\n        imgs\n        status\n        soldBefore\n        buyNowCloseTime\n        prebidClosedTrans\n        leftTrans\n      }\n      vehicle {\n        id\n        vin\n        createdAt\n        model {\n          id\n          name\n          make {\n            id\n            name\n          }\n        }\n        unprocessed {\n          name\n        }\n        updatedAt\n        year\n      }\n    }\n  }\n"): (typeof documents)["\n  query LotScreen($where: LotWhereUniqueInput!) {\n    lot(where: $where) {\n      id\n      auction\n      lotNumber\n      sellingBranch\n      saleLocation\n      location\n      auctionDateTime\n      seller\n      preAccidentValue\n      actualCashValue\n      estimatedRepairCost\n      lastPreBid\n      finalBid\n      saleStatus\n      titleType\n      titleBrand\n      titleNotes\n      primaryDamage\n      secondaryDamage\n      loss\n      startCode\n      highlights\n      key\n      odometer\n      engine\n      fuelType\n      transmission\n      drivelineType\n      interiorColor\n      exteriorColor\n      buyNowPrice\n      bodyStyle\n      airbagsStatus\n      cylinders\n      manufacturedIn\n      sourceLastUpdated\n      createdAt\n      updatedAt\n      unprocessed {\n        imgs\n        status\n        soldBefore\n        buyNowCloseTime\n        prebidClosedTrans\n        leftTrans\n      }\n      vehicle {\n        id\n        vin\n        createdAt\n        model {\n          id\n          name\n          make {\n            id\n            name\n          }\n        }\n        unprocessed {\n          name\n        }\n        updatedAt\n        year\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VehicleTypesFilterQuery(\n    $orderBy: [VehicleTypeOrderByWithRelationInput!]\n  ) {\n    vehicleTypes(orderBy: $orderBy) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query VehicleTypesFilterQuery(\n    $orderBy: [VehicleTypeOrderByWithRelationInput!]\n  ) {\n    vehicleTypes(orderBy: $orderBy) {\n      id\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MakesFilterQuery(\n    $where: MakeWhereInput\n    $orderBy: [MakeOrderByWithRelationInput!]\n  ) {\n    makes(where: $where, orderBy: $orderBy) {\n      name\n      id\n    }\n  }\n"): (typeof documents)["\n  query MakesFilterQuery(\n    $where: MakeWhereInput\n    $orderBy: [MakeOrderByWithRelationInput!]\n  ) {\n    makes(where: $where, orderBy: $orderBy) {\n      name\n      id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ModelsFilterQuery(\n    $orderBy: [ModelOrderByWithRelationInput!]\n    $where: ModelWhereInput\n  ) {\n    models(orderBy: $orderBy, where: $where) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query ModelsFilterQuery(\n    $orderBy: [ModelOrderByWithRelationInput!]\n    $where: ModelWhereInput\n  ) {\n    models(orderBy: $orderBy, where: $where) {\n      id\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Query(\n    $take: Int\n    $skip: Int\n    $orderBy: [LotOrderByWithRelationInput!]\n    $where: LotWhereInput\n  ) {\n    aggregateLot(where: $where) {\n      _count {\n        id\n      }\n    }\n    lots(take: $take, skip: $skip, orderBy: $orderBy, where: $where) {\n      id\n      auction\n      lotNumber\n      sellingBranch\n      saleLocation\n      location\n      auctionDateTime\n      seller\n      preAccidentValue\n      actualCashValue\n      estimatedRepairCost\n      lastPreBid\n      finalBid\n      saleStatus\n      titleType\n      titleBrand\n      titleNotes\n      primaryDamage\n      secondaryDamage\n      loss\n      startCode\n      highlights\n      key\n      odometer\n      engine\n      fuelType\n      transmission\n      drivelineType\n      interiorColor\n      exteriorColor\n      buyNowPrice\n      bodyStyle\n      airbagsStatus\n      cylinders\n      manufacturedIn\n      sourceLastUpdated\n      vehicleId\n      unprocessed {\n        imgs\n      }\n      vehicle {\n        id\n        vin\n        modelId\n        seriesId\n        vehicleTypeId\n        year\n        model {\n          id\n          name\n          make {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Query(\n    $take: Int\n    $skip: Int\n    $orderBy: [LotOrderByWithRelationInput!]\n    $where: LotWhereInput\n  ) {\n    aggregateLot(where: $where) {\n      _count {\n        id\n      }\n    }\n    lots(take: $take, skip: $skip, orderBy: $orderBy, where: $where) {\n      id\n      auction\n      lotNumber\n      sellingBranch\n      saleLocation\n      location\n      auctionDateTime\n      seller\n      preAccidentValue\n      actualCashValue\n      estimatedRepairCost\n      lastPreBid\n      finalBid\n      saleStatus\n      titleType\n      titleBrand\n      titleNotes\n      primaryDamage\n      secondaryDamage\n      loss\n      startCode\n      highlights\n      key\n      odometer\n      engine\n      fuelType\n      transmission\n      drivelineType\n      interiorColor\n      exteriorColor\n      buyNowPrice\n      bodyStyle\n      airbagsStatus\n      cylinders\n      manufacturedIn\n      sourceLastUpdated\n      vehicleId\n      unprocessed {\n        imgs\n      }\n      vehicle {\n        id\n        vin\n        modelId\n        seriesId\n        vehicleTypeId\n        year\n        model {\n          id\n          name\n          make {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;