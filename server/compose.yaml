# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  web:
    build:
      context: ../
      dockerfile: ./client/apps/next/Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - 80:3000

  server:
    build:
      context: .
    environment:
      DATABASE_URL: mongodb://root:example@mongo:27018/badhistory?authSource=admin&directConnection=true
#      NODE_ENV: production
    ports:
      - 3001:3001
    depends_on:
      mongo:
        condition: service_healthy

#  db:
#    image: postgres
#    restart: always
#    user: postgres
#    secrets:
#      - db-password
#    volumes:
#      - db-data:/var/lib/postgresql/data
#    environment:
#      - POSTGRES_DB=example
#      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#    expose:
#      - 5432
#    healthcheck:
#      test: [ "CMD", "pg_isready" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5


  mongo:
    build: ./mongodb_replica
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_REPLICA_HOST: localhost
      MONGO_REPLICA_PORT: 27018
    ports:
      - 27018:27018
    restart: always
    volumes:
      - db-data:/data/db
    healthcheck:
      test: [ 'CMD', 'mongosh', 'admin', '--port', '27018', '--eval', "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 2s
      retries: 20

#  mongo-express:
#    image: mongo-express
#    restart: always
#    ports:
#      - 8081:8081
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: example
#      ME_CONFIG_MONGODB_URL: mongodb://root:example@0.0.0.0:27018/?replicaSet=rs0

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.


volumes:
  db-data:
#secrets:
# db-password:
#   file: db/password.txt